from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, StaleElementReferenceException
import time
import pandas as pd

# Initialize ChromeDriver with performance options
chromedriver_path = r'D:\Latihan\Scrapping\ambil data spse\chromedriver.exe'
service = Service(executable_path=chromedriver_path)
options = webdriver.ChromeOptions()
options.add_argument("--start-maximized")
options.add_argument('--disable-blink-features=AutomationControlled')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--no-sandbox')
options.add_argument('--disable-gpu')
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option('useAutomationExtension', False)

# Initialize variables with optimized XPaths
table_data = []
base_xpath = '''//*[@id="body"]/div[2]/div[1]/ng2-reporting-plate/plate/div/div/div/div[1]/div/div/div/div/div/canvas-pancake-adapter/canvas-layout/div/div/div/div/div/div/ng2-report/ng2-canvas-container/div/div[12]/ng2-canvas-component/div/div/div/div/table-wrapper/div/ng2-table/div'''
next_page_xpath = '''//*[@id="body"]/div[2]/div[1]/ng2-reporting-plate/plate/div/div/div/div[1]/div/div/div/div/div/canvas-pancake-adapter/canvas-layout/div/div/div/div/div/div/ng2-report/ng2-canvas-container/div/div[12]/ng2-canvas-component/div/div/div/div/table-wrapper/div/ng2-table/div/div[6]/div[3]'''
headers = ['Kode Paket', 'Nama Paket', 'Nama Satker', 'Jenis Pengadaan', 'Status Penilaian', 'Skor Penilaian']

def get_cell_xpath(row_num, cell_index):
    """Generate optimized XPath for each cell"""
    return f"{base_xpath}/div[3]/div[2]/div[{row_num}]/div[{cell_index}]"

def wait_for_element(driver, xpath, timeout=3):
    """Wait for element with shorter timeout"""
    try:
        return WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.XPATH, xpath))
        )
    except:
        return None

def get_cell_value(driver, xpath, retries=2, delay=0.2):
    """Get cell value with faster retry mechanism"""
    for attempt in range(retries):
        try:
            element = wait_for_element(driver, xpath)
            if not element:
                continue
            
            driver.execute_script("arguments[0].scrollIntoView(true);", element)
            time.sleep(delay)
            
            value = driver.execute_script("return arguments[0].textContent", element).strip()
            return value if value else None
            
        except StaleElementReferenceException:
            time.sleep(delay)
        except:
            if attempt == retries - 1:
                return None
            time.sleep(delay)
    return None

def check_assessment_status(driver, row_num):
    """Check if vendor has been assessed"""
    status_xpath = get_cell_xpath(row_num, 6)  # Status Penilaian cell
    status = get_cell_value(driver, status_xpath)
    return status and status.strip().lower() != "belum dinilai"

def process_row(driver, row_num):
    """Process a single row only if assessed"""
    # Check assessment status first
    if not check_assessment_status(driver, row_num):
        print(f"↷ Baris {row_num} belum dinilai - dilewati")
        return None
        
    row_data = {}
    data_found = False
    
    cell_indices = {
        'Kode Paket': 2,
        'Nama Paket': 3,
        'Nama Satker': 4,
        'Jenis Pengadaan': 5,
        'Status Penilaian': 6,
        'Skor Penilaian': 7
    }
    
    for header, index in cell_indices.items():
        value = get_cell_value(driver, get_cell_xpath(row_num, index))
        if value:
            row_data[header] = value
            data_found = True
            if header == 'Status Penilaian':
                print(f"✓ Status: {value}")
        else:
            row_data[header] = "Data tidak tersedia"
    
    return row_data if data_found else None

def click_next_page(driver):
    """Click next page with optimized waiting"""
    try:
        next_button = wait_for_element(driver, next_page_xpath, timeout=5)
        if next_button and next_button.is_displayed():
            driver.execute_script("arguments[0].click();", next_button)
            time.sleep(3)
            return True
    except Exception as e:
        print(f"Error clicking next page: {str(e)}")
    return False

def scrape_page(driver, page_num):
    """Scrape data with optimized performance and complete row checking"""
    page_data = []
    row = 2  # Start from row 2
    total_rows = 50  # Set fixed number of rows to check
    scroll_height = 300

    # Check all rows from 2 to 50
    while row <= total_rows:
        print(f"\nMemeriksa baris ke-{row}, Halaman {page_num}")
        
        try:
            # Scroll every 5 rows
            if row % 5 == 0:
                driver.execute_script(f"window.scrollTo(0, {(row - 2) * 60});")
                time.sleep(0.2)
            
            # Process row and check status
            row_data = process_row(driver, row)
            
            if row_data:
                page_data.append(row_data)
                print(f"✓ Data baris {row} berhasil disimpan")
                
                # Save progress every 10 successful rows
                if len(page_data) % 10 == 0:
                    df = pd.DataFrame(table_data + page_data)
                    df.to_csv('hasil_penilaian_vendor_all.csv', index=False, encoding='utf-8')
                    print(f"Progress tersimpan - {len(df)} total baris")
            
        except Exception as e:
            print(f"Error pada baris {row}: {str(e)}")
            time.sleep(0.3)
        
        finally:
            row += 1  # Always increment row counter
    
    print(f"\nSelesai memeriksa {total_rows-1} baris pada halaman {page_num}")
    return page_data

# Main execution
driver = webdriver.Chrome(service=service, options=options)
driver.set_page_load_timeout(20)
driver.implicitly_wait(3)

try:
    url = '''https://lookerstudio.google.com/embed/u/0/reporting/998e9dad-3b4a-425c-aea9-5269510bcc02/page/88QaD?params=%7B%22df15%22:%22include%25EE%2580%25800%25EE%2580%2580IN%25EE%2580%2580Kementerian%20Pekerjaan%20Umum%20dan%20Perumahan%20Rakyat%22,%22df13%22:%22include%25EE%2580%25801%25EE%2580%2580IN%25EE%2580%25802024%22%7D'''
    driver.get(url)
    print("Menunggu dashboard memuat...")
    time.sleep(10)

    if not wait_for_element(driver, base_xpath, timeout=10):
        raise Exception("Tabel tidak ditemukan")

    for page in range(1, 4):
        print(f"\n=== Halaman {page} ===")
        
        page_data = scrape_page(driver, page)
        table_data.extend(page_data)
        
        df = pd.DataFrame(table_data)
        df.to_csv('hasil_penilaian_vendor_all.csv', index=False, encoding='utf-8')
        print(f"Halaman {page}: {len(page_data)} baris, Total: {len(table_data)}")
        
        if page < 3:
            if not click_next_page(driver):
                break
            time.sleep(3)

except Exception as e:
    print(f"Error: {str(e)}")

finally:
    if table_data:
        df = pd.DataFrame(table_data)
        df.to_csv('hasil_penilaian_vendor_all.csv', index=False, encoding='utf-8')
        print(f"\nTotal data: {len(table_data)} baris")
    
    driver.quit()
